import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CONFIG, ShareButtonDirective, ShareButtons, ShareModule } from '@ngx-share/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ShareButtonComponent {
    /**
     * @param {?} share
     */
    constructor(share) {
        this.share = share;
        /**
         * Show button icon
         */
        this.showIcon = true;
        /**
         * Show button text
         */
        this.showText = false;
        /**
         * Button share count
         */
        this.showCount = false;
        /**
         * Button size
         */
        this.size = this.share.size;
        /**
         * Share count event
         */
        this.count = new EventEmitter();
        /**
         * Share dialog opened event
         */
        this.opened = new EventEmitter();
        /**
         * Share dialog closed event
         */
        this.closed = new EventEmitter();
        /**
         * Set theme as button class
         */
        this.buttonClass = 'sb-button sb-' + this.share.theme;
    }
    /**
     * @param {?} button
     * @return {?}
     */
    set createButton(button) {
        this.shareCount = 0;
        this.button = button;
    }
    /**
     * on set share URL
     * @param {?} newUrl
     * @return {?}
     */
    set setUrl(newUrl) {
        /** Reset share count when url changes */
        this.shareCount = 0;
        this.url = newUrl;
    }
    /**
     * Button theme
     * @param {?} theme
     * @return {?}
     */
    set setTheme(theme) {
        this.buttonClass = 'sb-button sb-' + theme;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    onCount(count) {
        this.shareCount = count;
        this.count.emit(count);
    }
}
ShareButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-button',
                template: `<button class="sb-wrapper"
        [shareButton]="button"
        [sbUrl]="url"
        [sbImage]="image"
        [sbTitle]="title"
        [sbDescription]="description"
        [sbTags]="tags"
        (sbOpened)="opened.emit($event)"
        (sbClosed)="closed.emit($event)"
        (sbCount)="onCount($event)"
        [class.sb-show-icon]="showIcon"
        [class.sb-show-text]="showText"
        [class.sb-show-count]="showCount && shareCount"
        [style.fontSize.px]="(1 + size/20) * 14">

  <div class="sb-inner">

    <!-- HIDE BUTTON'S ICON AND TEXT IF CUSTOM TEMPLATE IS USED -->

    <div class="sb-content">

      <!-- BUTTON ICON -->
      <div *ngIf="showIcon" class="sb-icon">
        <i [class]="ref.prop.icon" aria-hidden="true"></i>
      </div>

      <!-- BUTTON TEXT -->
      <div *ngIf="showText" class="sb-text">
        {{ text || ref.prop.text }}
      </div>

    </div>

    <!-- BUTTON COUNT -->
    <div *ngIf="showCount && shareCount" class="sb-count">
      <span>{{ shareCount | nFormatter }}</span>
    </div>

  </div>
</button>
`,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
ShareButtonComponent.ctorParameters = () => [
    { type: ShareButtons, },
];
ShareButtonComponent.propDecorators = {
    "createButton": [{ type: Input, args: ['button',] },],
    "setUrl": [{ type: Input, args: ['url',] },],
    "title": [{ type: Input },],
    "description": [{ type: Input },],
    "image": [{ type: Input },],
    "tags": [{ type: Input },],
    "showIcon": [{ type: Input },],
    "showText": [{ type: Input },],
    "showCount": [{ type: Input },],
    "text": [{ type: Input },],
    "size": [{ type: Input },],
    "setTheme": [{ type: Input, args: ['theme',] },],
    "count": [{ type: Output },],
    "opened": [{ type: Output },],
    "closed": [{ type: Output },],
    "buttonClass": [{ type: HostBinding, args: ['class',] },],
    "ref": [{ type: ViewChild, args: [ShareButtonDirective,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} config
 * @return {?}
 */
function ShareButtonsFactory(config) {
    return new ShareButtons(config);
}
class ShareButtonModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: ShareButtonModule,
            providers: [
                { provide: CONFIG, useValue: config },
                {
                    provide: ShareButtons,
                    useFactory: ShareButtonsFactory,
                    deps: [CONFIG]
                }
            ]
        };
    }
}
ShareButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButtonComponent
                ],
                imports: [
                    ShareModule
                ],
                exports: [
                    ShareModule,
                    ShareButtonComponent
                ]
            },] },
];
/** @nocollapse */
ShareButtonModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtonsFactory, ShareButtonModule, ShareButtonComponent };
//# sourceMappingURL=ngx-share-button.js.map
