{
  "version": 3,
  "file": "ngx-share-core.umd.js",
  "sources": [
    "ng://@ngx-share/core/src/share.module.ts",
    "ng://@ngx-share/core/src/n-formatter.pipe.ts",
    "ng://@ngx-share/core/src/share-button.directive.ts",
    "ng://@ngx-share/core/src/share.service.ts",
    "ng://@ngx-share/core/src/share.prop.ts",
    "ng://@ngx-share/core/src/share.operators.ts",
    "ng://@ngx-share/core/src/share.tokens.ts"
  ],
  "sourcesContent": [
    "import { NgModule, InjectionToken } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ShareButtons } from './share.service';\r\nimport { ShareButtonDirective } from './share-button.directive';\r\nimport { NFormatterPipe } from './n-formatter.pipe';\r\nimport { ShareButtonsConfig } from './share.models';\r\nimport { CONFIG } from './share.tokens';\r\n\r\nexport function ShareButtonsFactory(config: ShareButtonsConfig) {\r\n  return new ShareButtons(config);\r\n}\r\n\r\n/** TODO: remove CommonModule */\r\n@NgModule({\r\n  declarations: [\r\n    ShareButtonDirective,\r\n    NFormatterPipe\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    ShareButtonDirective,\r\n    NFormatterPipe\r\n  ]\r\n})\r\nexport class ShareModule {\r\n  static forRoot(config?: ShareButtonsConfig) {\r\n    return {\r\n      ngModule: ShareModule,\r\n      providers: [\r\n        {provide: CONFIG, useValue: config},\r\n        {\r\n          provide: ShareButtons,\r\n          useFactory: ShareButtonsFactory,\r\n          deps: [CONFIG]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'nFormatter'\r\n})\r\nexport class NFormatterPipe implements PipeTransform {\r\n\r\n  transform(num: any, digits?: any): any {\r\n\r\n    if (typeof num !== 'number') {\r\n      num = 1;\r\n    }\r\n\r\n    return nFormatter(num, digits);\r\n  }\r\n\r\n}\r\n\r\n/** Change share counts to a readable number */\r\nexport const nFormatter = (num: number, digits: number) => {\r\n\r\n  const si = [\r\n    {value: 1E18, symbol: 'E'},\r\n    {value: 1E15, symbol: 'P'},\r\n    {value: 1E12, symbol: 'T'},\r\n    {value: 1E9, symbol: 'G'},\r\n    {value: 1E6, symbol: 'M'},\r\n    {value: 1E3, symbol: 'K'}\r\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\r\n\r\n  for (let i = 0; i < si.length; i++) {\r\n    if (num >= si[i].value) {\r\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\r\n    }\r\n  }\r\n  return num.toFixed(digits).replace(rx, '$1');\r\n};\r\n",
    "import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  HostListener,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { catchError } from 'rxjs/operators/catchError';\r\nimport { take } from 'rxjs/operators/take';\r\nimport { tap } from 'rxjs/operators/tap';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\n\r\nimport { ShareButtons } from './share.service';\r\nimport { IShareButton, ShareButtonRef } from './share.models';\r\n\r\n/** Google analytics ref */\r\ndeclare const ga: Function;\r\ndeclare const global: any;\r\ndeclare const window: any;\r\n\r\n@Directive({\r\n  selector: '[shareButton]'\r\n})\r\nexport class ShareButtonDirective {\r\n\r\n  /** A ref for window object that works on SSR */\r\n  window: Window;\r\n\r\n  /** Button properties */\r\n  prop: IShareButton;\r\n\r\n  /** The validated share URL */\r\n  url: string;\r\n\r\n  /** Button class - used to remove previous class when the button type is changed */\r\n  buttonClass: string;\r\n\r\n  /** Meta tags inputs - initialized from the global options */\r\n  @Input() sbTitle = this.shareService.title;\r\n  @Input() sbDescription = this.shareService.description;\r\n  @Input() sbImage = this.shareService.image;\r\n  @Input() sbTags = this.shareService.tags;\r\n\r\n  /** Create share button  */\r\n  @Input('shareButton')\r\n  set setButton(buttonName: string) {\r\n\r\n    /** Create a new button of type <buttonName> */\r\n    const button = {...this.shareService.prop[buttonName]};\r\n\r\n    if (button) {\r\n\r\n      /** Set share button */\r\n      this.prop = button;\r\n\r\n      /** Remove previous button class */\r\n      this.renderer.removeClass(this.el.nativeElement, 'sb-' + this.buttonClass);\r\n\r\n      /** Add new button class */\r\n      this.renderer.addClass(this.el.nativeElement, 'sb-' + button.type);\r\n\r\n      /** Keep a copy of the class for future replacement */\r\n      this.buttonClass = button.type;\r\n\r\n      /** Get link's shared count */\r\n      this.emitCount();\r\n    } else {\r\n      throw new Error(`[ShareButtons]: The share button '${buttonName}' does not exist!`);\r\n    }\r\n  }\r\n\r\n  /** Set share URL */\r\n  @Input()\r\n  set sbUrl(newUrl: string) {\r\n\r\n    /** Check if new URL is equal the current URL */\r\n    if (newUrl !== this.url) {\r\n      this.url = this.getValidURL(newUrl);\r\n      this.emitCount();\r\n    }\r\n  }\r\n\r\n  /** Share count event */\r\n  @Output() sbCount = new EventEmitter<number>();\r\n\r\n  /** Share dialog opened event */\r\n  @Output() sbOpened = new EventEmitter<string>();\r\n\r\n  /** Share dialog closed event */\r\n  @Output() sbClosed = new EventEmitter<string>();\r\n\r\n  constructor(private shareService: ShareButtons,\r\n              private http: HttpClient,\r\n              public renderer: Renderer2,\r\n              public cd: ChangeDetectorRef,\r\n              private el: ElementRef) {\r\n    this.window = window || global;\r\n  }\r\n\r\n  /**\r\n   * Share link on element click\r\n   */\r\n  @HostListener('click')\r\n  onClick() {\r\n    /** Set user did not set the url using [sbUrl], use window URL */\r\n    if (!this.url) {\r\n      this.url = encodeURIComponent(this.window.location.href);\r\n    }\r\n\r\n    /** Emit opened share button type */\r\n    this.sbOpened.emit(this.prop.type);\r\n\r\n    const ref: ShareButtonRef = {\r\n      url: this.url,\r\n      cd: this.cd,\r\n      renderer: this.renderer,\r\n      window: this.window,\r\n      prop: this.prop,\r\n      el: this.el.nativeElement,\r\n      os: this.shareService.os,\r\n      metaTags: {\r\n        title: this.sbTitle,\r\n        description: this.sbDescription,\r\n        image: this.sbImage,\r\n        tags: this.sbTags,\r\n        via: this.shareService.twitterAccount,\r\n      }\r\n    };\r\n\r\n    /** Share the link */\r\n    of(ref).pipe(\r\n      ...this.prop.share.operators,\r\n      tap((sharerURL: string) => this.share(sharerURL)),\r\n      take(1)\r\n    ).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Emit share count\r\n   */\r\n  emitCount() {\r\n    /** Only if share count has observers & the button has support for share count */\r\n    if (this.url && this.sbCount.observers.length && this.prop.count) {\r\n\r\n      /** Emit share count to (sbCount) Output */\r\n      this.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open sharing window\r\n   * @param url - Share URL\r\n   */\r\n  share(url: string) {\r\n    let popUp;\r\n    if (url) {\r\n\r\n      /** GA tracking */\r\n      if (this.shareService.gaTracking && typeof ga !== 'undefined') {\r\n        ga('send', 'social', this.prop.type, 'click', this.url);\r\n      }\r\n\r\n      popUp = this.window.open(url, 'newwindow', this.shareService.windowSize);\r\n    }\r\n\r\n    /** If dialog closed event has subscribers, emit closed dialog type */\r\n    if (this.sbClosed.observers.length && popUp) {\r\n      const pollTimer = this.window.setInterval(() => {\r\n        if (popUp.closed) {\r\n          this.window.clearInterval(pollTimer);\r\n          this.sbClosed.emit(this.prop.type);\r\n        }\r\n      }, 200);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get link share count\r\n   * @param url - Share URL\r\n   * @returns Share count\r\n   */\r\n  count(url: string): Observable<any> {\r\n\r\n    if (this.prop.count.request === 'jsonp') {\r\n\r\n      return this.http.jsonp<any>(this.prop.count.url + url, 'callback').pipe(\r\n        ...this.prop.count.operators,\r\n        catchError(() => empty()),\r\n      );\r\n    } else {\r\n\r\n      return this.http.get<any>(this.prop.count.url + url, this.prop.count.args).pipe(\r\n        ...this.prop.count.operators,\r\n        catchError(() => empty())\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a valid URL for sharing\r\n   * @param url - URL to validate\r\n   * @returns Sharable URL\r\n   */\r\n  private getValidURL(url: string) {\r\n\r\n    if (url) {\r\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n\r\n      if (r.test(url)) {\r\n        return encodeURIComponent(url);\r\n      }\r\n      console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\r\n    }\r\n    /** fallback to page current URL */\r\n    return encodeURIComponent(this.window.location.href);\r\n  }\r\n\r\n}\r\n",
    "import { Inject, Injectable } from '@angular/core';\r\nimport { IShareButton, IShareButtons, ShareButtonsConfig, ShareButtonsOptions } from './share.models';\r\nimport { CONFIG } from './share.tokens';\r\nimport { shareButtonsProp } from './share.prop';\r\n\r\ndeclare const global: any;\r\ndeclare const window: any;\r\ndeclare const navigator: any;\r\n\r\n@Injectable()\r\nexport class ShareButtons {\r\n\r\n  /** List of share buttons */\r\n  allButtons: string[];\r\n\r\n  /** Default options */\r\n  options: ShareButtonsOptions;\r\n\r\n  /** Default properties */\r\n  prop: IShareButtons;\r\n\r\n  /** User OS */\r\n  os: string;\r\n\r\n  constructor(@Inject(CONFIG) config: ShareButtonsConfig) {\r\n\r\n    /** Set buttons properties */\r\n    this.prop = shareButtonsProp;\r\n\r\n    /** Set buttons list */\r\n    this.allButtons = Object.keys(this.prop);\r\n\r\n    /** Set default options */\r\n    this.options = {\r\n      theme: 'default',\r\n      include: this.allButtons,\r\n      exclude: [],\r\n      size: 0,\r\n      title: null,\r\n      image: null,\r\n      description: null,\r\n      tags: null,\r\n      gaTracking: false,\r\n      twitterAccount: null,\r\n      windowWidth: 800,\r\n      windowHeight: 500\r\n    };\r\n\r\n    if (config) {\r\n      /** Override global options with user's preference */\r\n      this.options = mergeDeep(this.options, config.options);\r\n      this.prop = mergeDeep(this.prop, config.prop);\r\n    }\r\n\r\n    /** Get user browser info */\r\n    this.os = getOS();\r\n  }\r\n\r\n  get twitterAccount() {\r\n    return this.options.twitterAccount;\r\n  }\r\n\r\n  /**\r\n   * Get wanted buttons\r\n   */\r\n  get buttons() {\r\n    if (!this.options.exclude.length) {\r\n      return this.options.include;\r\n    }\r\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\r\n  }\r\n\r\n  get theme() {\r\n    return this.options.theme;\r\n  }\r\n\r\n  get windowSize() {\r\n    return `width=${this.options.windowWidth}, height=${this.options.windowHeight}`;\r\n  }\r\n\r\n  get title() {\r\n    return this.options.title;\r\n  }\r\n\r\n  get description() {\r\n    return this.options.description;\r\n  }\r\n\r\n  get image() {\r\n    return this.options.image;\r\n  }\r\n\r\n  get tags() {\r\n    return this.options.tags;\r\n  }\r\n\r\n  get gaTracking() {\r\n    return this.options.gaTracking;\r\n  }\r\n\r\n  get size() {\r\n    return this.options.size;\r\n  }\r\n\r\n  registerButton(name: string, data: IShareButton) {\r\n    this.prop = {...shareButtonsProp, ...{[name]: data}};\r\n    this.allButtons = Object.keys(this.prop);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Determine the mobile operating system.\r\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\r\n */\r\nfunction getOS() {\r\n  const userAgent = (navigator || global).userAgent || (navigator || global).vendor || (window || global).opera;\r\n\r\n  if (/android/i.test(userAgent)) {\r\n    return 'android';\r\n  }\r\n\r\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n  if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\r\n    return 'ios';\r\n  }\r\n\r\n  return 'desktop';\r\n}\r\n\r\n/**\r\n * Simple object check.\r\n */\r\nfunction isObject(item) {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\n/**\r\n * Deep merge two objects.\r\n */\r\nfunction mergeDeep(target, ...sources) {\r\n  if (!sources.length) {\r\n    return target;\r\n  }\r\n  const source = sources.shift();\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) {\r\n          Object.assign(target, {[key]: {}});\r\n        }\r\n        mergeDeep(target[key], source[key]);\r\n      } else {\r\n        Object.assign(target, {[key]: source[key]});\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(target, ...sources);\r\n}\r\n",
    "import { map } from 'rxjs/operators/map';\r\nimport { noneOperator, metaTagsOperator, printOperator, pinterestOperator, copyOperators } from './share.operators';\r\nimport { IShareButtons } from './share.models';\r\n\r\nexport const shareButtonsProp: IShareButtons = {\r\n  facebook: {\r\n    type: 'facebook',\r\n    text: 'Facebook',\r\n    icon: 'fa fa-facebook',\r\n    color: '#3b5998',\r\n    share: {\r\n      desktop: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      android: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      ios: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      operators: [noneOperator]\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://graph.facebook.com?id=',\r\n      operators: [\r\n        map((res: any) => +res.share.share_count)\r\n      ]\r\n    }\r\n  },\r\n  twitter: {\r\n    type: 'twitter',\r\n    text: 'Twitter',\r\n    icon: 'fa fa-twitter',\r\n    color: '#00acee',\r\n    share: {\r\n      desktop: 'https://twitter.com/intent/tweet?url=',\r\n      android: 'https://twitter.com/intent/tweet?url=',\r\n      ios: 'https://twitter.com/intent/tweet?url=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'text',\r\n        tags: 'hashtags',\r\n        via: 'via'\r\n      }\r\n    }\r\n  },\r\n  google: {\r\n    type: 'google',\r\n    text: 'Google+',\r\n    icon: 'fa fa-google-plus',\r\n    color: '#DB4437',\r\n    share: {\r\n      desktop: 'https://plus.google.com/share?url=',\r\n      android: 'https://plus.google.com/share?url=',\r\n      ios: 'https://plus.google.com/share?url=',\r\n      operators: [noneOperator],\r\n    }\r\n  },\r\n  linkedin: {\r\n    type: 'linkedin',\r\n    text: 'LinkedIn',\r\n    icon: 'fa fa-linkedin',\r\n    color: '#006fa6',\r\n    share: {\r\n      desktop: 'http://www.linkedin.com/shareArticle?url=',\r\n      android: 'http://www.linkedin.com/shareArticle?url=',\r\n      ios: 'http://www.linkedin.com/shareArticle?url=',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        title: 'title',\r\n        description: 'summary'\r\n      },\r\n    },\r\n    count: {\r\n      request: 'jsonp',\r\n      url: 'https://www.linkedin.com/countserv/count/share?url=',\r\n      operators: [\r\n        map((res: any) => +res.count)\r\n      ]\r\n    }\r\n  },\r\n  pinterest: {\r\n    type: 'pinterest',\r\n    text: 'Pinterest',\r\n    icon: 'fa fa-pinterest-p',\r\n    color: '#BD091D',\r\n    share: {\r\n      desktop: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      android: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      ios: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      operators: [\r\n        metaTagsOperator,\r\n        pinterestOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'description',\r\n        image: 'media'\r\n      }\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://api.pinterest.com/v1/urls/count.json?url=',\r\n      args: {responseType: 'text'},\r\n      operators: [\r\n        map((text: string) => JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1'))),\r\n        map((res: any) => +res.count)\r\n      ]\r\n    }\r\n  },\r\n  reddit: {\r\n    type: 'reddit',\r\n    text: 'Reddit',\r\n    icon: 'fa fa-reddit-alien',\r\n    color: '#FF4006',\r\n    share: {\r\n      desktop: 'http://www.reddit.com/submit?url=',\r\n      android: 'http://www.reddit.com/submit?url=',\r\n      ios: 'http://www.reddit.com/submit?url=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        title: 'title'\r\n      },\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://buttons.reddit.com/button_info.json?url=',\r\n      operators: [\r\n        map((res: any) => +res.data.children[0].data.score)\r\n      ]\r\n    },\r\n  },\r\n  tumblr: {\r\n    type: 'tumblr',\r\n    text: 'Tumblr',\r\n    icon: 'fa fa-tumblr',\r\n    color: '#36465D',\r\n    share: {\r\n      desktop: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      android: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      ios: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'caption',\r\n        tags: 'tags'\r\n      }\r\n    },\r\n    count: {\r\n      request: 'jsonp',\r\n      url: 'https://api.tumblr.com/v2/share/stats?url=',\r\n      operators: [\r\n        map((res: any) => +res.response.note_count)\r\n      ]\r\n    }\r\n  },\r\n  whatsapp: {\r\n    type: 'whatsapp',\r\n    text: 'WhatsApp',\r\n    icon: 'fa fa-whatsapp',\r\n    color: '#25D366',\r\n    share: {\r\n      desktop: 'https://web.whatsapp.com/send?',\r\n      android: 'whatsapp://send?',\r\n      ios: 'whatsapp://send?',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        description: 'text'\r\n      }\r\n    }\r\n  },\r\n  telegram: {\r\n    type: 'telegram',\r\n    text: 'Telegram',\r\n    icon: 'fa fa-send',\r\n    color: '#0088cc',\r\n    share: {\r\n      desktop: 'https://t.me/share/url?url=',\r\n      android: 'https://t.me/share/url?url=',\r\n      ios: 'https://t.me/share/url?url=',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        description: 'text'\r\n      }\r\n    }\r\n  },\r\n  vk: {\r\n    type: 'vk',\r\n    text: 'VKontakte',\r\n    icon: 'fa fa-vk',\r\n    color: '#4C75A3',\r\n    share: {\r\n      desktop: 'http://vk.com/share.php?url=',\r\n      android: 'http://vk.com/share.php?url=',\r\n      ios: 'http://vk.com/share.php?url=',\r\n      operators: [noneOperator]\r\n    }\r\n  },\r\n  stumble: {\r\n    type: 'stumble',\r\n    text: 'Stumble',\r\n    icon: 'fa fa-stumbleupon',\r\n    color: '#eb4924',\r\n    share: {\r\n      desktop: 'http://www.stumbleupon.com/submit?url=',\r\n      android: 'http://www.stumbleupon.com/submit?url=',\r\n      ios: 'http://www.stumbleupon.com/submit?url=',\r\n      operators: [noneOperator],\r\n    }\r\n  },\r\n  email: {\r\n    type: 'email',\r\n    text: 'Email',\r\n    icon: 'fa fa-envelope',\r\n    color: '#32A1A3',\r\n    share: {\r\n      desktop: 'mailto:?',\r\n      android: 'mailto:?',\r\n      ios: 'mailto:?',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        title: 'subject',\r\n        description: 'body'\r\n      }\r\n    }\r\n  },\r\n  copy: {\r\n    type: 'copy',\r\n    text: 'Copy link',\r\n    successText: 'Copied',\r\n    successIcon: 'fa fa-check',\r\n    failText: 'Error',\r\n    failIcon: 'fa fa-exclamation',\r\n    icon: 'fa fa-link',\r\n    color: '#607D8B',\r\n    share: {\r\n      operators: copyOperators\r\n    }\r\n  },\r\n  print: {\r\n    type: 'print',\r\n    text: 'Print',\r\n    icon: 'fa fa-print',\r\n    color: 'brown',\r\n    share: {\r\n      operators: [printOperator]\r\n    }\r\n  }\r\n};\r\n",
    "import { map } from 'rxjs/operators/map';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { ShareButtonRef } from './share.models';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * None operator - just return the sharer URL\r\n */\r\nexport const noneOperator = map((ref: ShareButtonRef) => ref.prop.share[ref.os] + ref.url);\r\n\r\n/**\r\n * Meta tags operator - Serialize meta tags in the sharer URL\r\n */\r\nexport const metaTagsOperator = map((ref: ShareButtonRef) => {\r\n\r\n  /** Social network supported meta tags */\r\n  const metaTags = ref.prop.share.metaTags;\r\n\r\n  /** User meta tags values */\r\n  const metaTagsValues = ref.metaTags;\r\n\r\n  /** Social network sharer URL */\r\n  const SharerURL = ref.prop.share[ref.os];\r\n\r\n  /** User share link */\r\n  let link = ref.url;\r\n\r\n  /** Loop over meta tags */\r\n  if (metaTags) {\r\n    Object.keys(metaTags).map((key) => {\r\n      if (metaTagsValues[key]) {\r\n        link += `&${metaTags[key]}=${encodeURIComponent(metaTagsValues[key])}`;\r\n      }\r\n    });\r\n  }\r\n  return SharerURL + link;\r\n});\r\n\r\n/**\r\n * Print button operator\r\n */\r\nexport const printOperator = map((ref: ShareButtonRef) => ref.window.print());\r\n\r\n/**\r\n * Pinterest operator - Since Pinterest requires the description and image meta tags,\r\n * this function checks if the meta tags are presented, if not it falls back to page meta tags\r\n * This should placed after the metaTagsOperator\r\n */\r\nexport const pinterestOperator = map((url: string) => {\r\n  if (!url.includes('&description')) {\r\n    /** If user didn't add description, get it from the OG meta tag */\r\n    const ogDescription: Element = document.querySelector(`meta[property=\"og:description\"]`);\r\n    if (ogDescription) {\r\n      url += '&description=' + ogDescription.getAttribute('content');\r\n    } else {\r\n      console.warn(`[ShareButtons]: You didn't set the description text for Pinterest button`);\r\n    }\r\n  }\r\n  if (!url.includes('&media')) {\r\n    const ogImage: Element = document.querySelector(`meta[property=\"og:image\"]`);\r\n    if (ogImage) {\r\n      url += '&media=' + ogImage.getAttribute('content');\r\n    } else {\r\n      console.warn(`[ShareButtons]: You didn't set the image URL for Pinterest button`);\r\n    }\r\n  }\r\n  return url;\r\n});\r\n\r\n/**\r\n * Copy button operator - to copy link to clipboard\r\n */\r\nexport const copyOperators = [\r\n  map((ref: ShareButtonRef) => {\r\n\r\n    /** Disable button click */\r\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\r\n\r\n    ref.temp = {text: ref.prop.text, icon: ref.prop.icon};\r\n    const link = decodeURIComponent(ref.url);\r\n\r\n    /** Create a hidden textarea element */\r\n    const textArea = ref.renderer.createElement('textarea');\r\n    textArea.style.position = 'fixed';\r\n    textArea.style.top = 0;\r\n    textArea.style.left = 0;\r\n    textArea.style.width = '2em';\r\n    textArea.style.height = '2em';\r\n    textArea.style.padding = 0;\r\n    textArea.style.border = 'none';\r\n    textArea.style.outline = 'none';\r\n    textArea.style.boxShadow = 'none';\r\n    textArea.style.background = 'transparent';\r\n    textArea.value = link;\r\n\r\n    ref.renderer.appendChild(ref.el, textArea);\r\n\r\n    /** highlight and copy the text */\r\n    textArea.select();\r\n    document.execCommand('copy');\r\n\r\n    ref.renderer.removeChild(ref.el, textArea);\r\n\r\n    /** Set success text and icon on button */\r\n    ref.prop.text = ref.prop.successText;\r\n    ref.prop.icon = ref.prop.successIcon;\r\n    ref.cd.markForCheck();\r\n\r\n    return ref;\r\n  }, (ref: ShareButtonRef) => {\r\n\r\n    /** Set error text and icon on button */\r\n    ref.prop.text = ref.prop.failText;\r\n    ref.prop.icon = ref.prop.failIcon;\r\n    ref.cd.markForCheck();\r\n    console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\r\n  }),\r\n  delay(2000),\r\n  map((ref: ShareButtonRef) => {\r\n\r\n    /** Enable button click */\r\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\r\n\r\n    /** Set the default text and icon back */\r\n    ref.prop.text = ref.temp.text;\r\n    ref.prop.icon = ref.temp.icon;\r\n    ref.cd.markForCheck();\r\n  })\r\n];\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { ShareButtonsConfig } from './share.models';\r\n\r\nexport const CONFIG = new InjectionToken<ShareButtonsConfig>('CONFIG');\r\n"
  ],
  "names": [
    "HostListener",
    "Output",
    "Input",
    "Directive",
    "catchError$1",
    "empty$1",
    "EventEmitter",
    "map$1",
    "map",
    "delay$1",
    "delay"
  ],
  "mappings": "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"
}
