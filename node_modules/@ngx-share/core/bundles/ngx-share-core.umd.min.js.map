{
  "version": 3,
  "file": "ngx-share-core.umd.min.js",
  "sources": [
    "ng://@ngx-share/core/src/share.operators.ts",
    "ng://@ngx-share/core/src/share.prop.ts",
    "ng://@ngx-share/core/src/share.service.ts",
    "ng://@ngx-share/core/src/share-button.directive.ts",
    "ng://@ngx-share/core/src/n-formatter.pipe.ts",
    "ng://@ngx-share/core/src/share.module.ts"
  ],
  "sourcesContent": [
    "import { map } from 'rxjs/operators/map';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { ShareButtonRef } from './share.models';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * None operator - just return the sharer URL\r\n */\r\nexport const noneOperator = map((ref: ShareButtonRef) => ref.prop.share[ref.os] + ref.url);\r\n\r\n/**\r\n * Meta tags operator - Serialize meta tags in the sharer URL\r\n */\r\nexport const metaTagsOperator = map((ref: ShareButtonRef) => {\r\n\r\n  /** Social network supported meta tags */\r\n  const metaTags = ref.prop.share.metaTags;\r\n\r\n  /** User meta tags values */\r\n  const metaTagsValues = ref.metaTags;\r\n\r\n  /** Social network sharer URL */\r\n  const SharerURL = ref.prop.share[ref.os];\r\n\r\n  /** User share link */\r\n  let link = ref.url;\r\n\r\n  /** Loop over meta tags */\r\n  if (metaTags) {\r\n    Object.keys(metaTags).map((key) => {\r\n      if (metaTagsValues[key]) {\r\n        link += `&${metaTags[key]}=${encodeURIComponent(metaTagsValues[key])}`;\r\n      }\r\n    });\r\n  }\r\n  return SharerURL + link;\r\n});\r\n\r\n/**\r\n * Print button operator\r\n */\r\nexport const printOperator = map((ref: ShareButtonRef) => ref.window.print());\r\n\r\n/**\r\n * Pinterest operator - Since Pinterest requires the description and image meta tags,\r\n * this function checks if the meta tags are presented, if not it falls back to page meta tags\r\n * This should placed after the metaTagsOperator\r\n */\r\nexport const pinterestOperator = map((url: string) => {\r\n  if (!url.includes('&description')) {\r\n    /** If user didn't add description, get it from the OG meta tag */\r\n    const ogDescription: Element = document.querySelector(`meta[property=\"og:description\"]`);\r\n    if (ogDescription) {\r\n      url += '&description=' + ogDescription.getAttribute('content');\r\n    } else {\r\n      console.warn(`[ShareButtons]: You didn't set the description text for Pinterest button`);\r\n    }\r\n  }\r\n  if (!url.includes('&media')) {\r\n    const ogImage: Element = document.querySelector(`meta[property=\"og:image\"]`);\r\n    if (ogImage) {\r\n      url += '&media=' + ogImage.getAttribute('content');\r\n    } else {\r\n      console.warn(`[ShareButtons]: You didn't set the image URL for Pinterest button`);\r\n    }\r\n  }\r\n  return url;\r\n});\r\n\r\n/**\r\n * Copy button operator - to copy link to clipboard\r\n */\r\nexport const copyOperators = [\r\n  map((ref: ShareButtonRef) => {\r\n\r\n    /** Disable button click */\r\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\r\n\r\n    ref.temp = {text: ref.prop.text, icon: ref.prop.icon};\r\n    const link = decodeURIComponent(ref.url);\r\n\r\n    /** Create a hidden textarea element */\r\n    const textArea = ref.renderer.createElement('textarea');\r\n    textArea.style.position = 'fixed';\r\n    textArea.style.top = 0;\r\n    textArea.style.left = 0;\r\n    textArea.style.width = '2em';\r\n    textArea.style.height = '2em';\r\n    textArea.style.padding = 0;\r\n    textArea.style.border = 'none';\r\n    textArea.style.outline = 'none';\r\n    textArea.style.boxShadow = 'none';\r\n    textArea.style.background = 'transparent';\r\n    textArea.value = link;\r\n\r\n    ref.renderer.appendChild(ref.el, textArea);\r\n\r\n    /** highlight and copy the text */\r\n    textArea.select();\r\n    document.execCommand('copy');\r\n\r\n    ref.renderer.removeChild(ref.el, textArea);\r\n\r\n    /** Set success text and icon on button */\r\n    ref.prop.text = ref.prop.successText;\r\n    ref.prop.icon = ref.prop.successIcon;\r\n    ref.cd.markForCheck();\r\n\r\n    return ref;\r\n  }, (ref: ShareButtonRef) => {\r\n\r\n    /** Set error text and icon on button */\r\n    ref.prop.text = ref.prop.failText;\r\n    ref.prop.icon = ref.prop.failIcon;\r\n    ref.cd.markForCheck();\r\n    console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\r\n  }),\r\n  delay(2000),\r\n  map((ref: ShareButtonRef) => {\r\n\r\n    /** Enable button click */\r\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\r\n\r\n    /** Set the default text and icon back */\r\n    ref.prop.text = ref.temp.text;\r\n    ref.prop.icon = ref.temp.icon;\r\n    ref.cd.markForCheck();\r\n  })\r\n];\r\n",
    "import { map } from 'rxjs/operators/map';\r\nimport { noneOperator, metaTagsOperator, printOperator, pinterestOperator, copyOperators } from './share.operators';\r\nimport { IShareButtons } from './share.models';\r\n\r\nexport const shareButtonsProp: IShareButtons = {\r\n  facebook: {\r\n    type: 'facebook',\r\n    text: 'Facebook',\r\n    icon: 'fa fa-facebook',\r\n    color: '#3b5998',\r\n    share: {\r\n      desktop: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      android: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      ios: 'https://www.facebook.com/sharer/sharer.php?u=',\r\n      operators: [noneOperator]\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://graph.facebook.com?id=',\r\n      operators: [\r\n        map((res: any) => +res.share.share_count)\r\n      ]\r\n    }\r\n  },\r\n  twitter: {\r\n    type: 'twitter',\r\n    text: 'Twitter',\r\n    icon: 'fa fa-twitter',\r\n    color: '#00acee',\r\n    share: {\r\n      desktop: 'https://twitter.com/intent/tweet?url=',\r\n      android: 'https://twitter.com/intent/tweet?url=',\r\n      ios: 'https://twitter.com/intent/tweet?url=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'text',\r\n        tags: 'hashtags',\r\n        via: 'via'\r\n      }\r\n    }\r\n  },\r\n  google: {\r\n    type: 'google',\r\n    text: 'Google+',\r\n    icon: 'fa fa-google-plus',\r\n    color: '#DB4437',\r\n    share: {\r\n      desktop: 'https://plus.google.com/share?url=',\r\n      android: 'https://plus.google.com/share?url=',\r\n      ios: 'https://plus.google.com/share?url=',\r\n      operators: [noneOperator],\r\n    }\r\n  },\r\n  linkedin: {\r\n    type: 'linkedin',\r\n    text: 'LinkedIn',\r\n    icon: 'fa fa-linkedin',\r\n    color: '#006fa6',\r\n    share: {\r\n      desktop: 'http://www.linkedin.com/shareArticle?url=',\r\n      android: 'http://www.linkedin.com/shareArticle?url=',\r\n      ios: 'http://www.linkedin.com/shareArticle?url=',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        title: 'title',\r\n        description: 'summary'\r\n      },\r\n    },\r\n    count: {\r\n      request: 'jsonp',\r\n      url: 'https://www.linkedin.com/countserv/count/share?url=',\r\n      operators: [\r\n        map((res: any) => +res.count)\r\n      ]\r\n    }\r\n  },\r\n  pinterest: {\r\n    type: 'pinterest',\r\n    text: 'Pinterest',\r\n    icon: 'fa fa-pinterest-p',\r\n    color: '#BD091D',\r\n    share: {\r\n      desktop: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      android: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      ios: 'https://in.pinterest.com/pin/create/button/?url=',\r\n      operators: [\r\n        metaTagsOperator,\r\n        pinterestOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'description',\r\n        image: 'media'\r\n      }\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://api.pinterest.com/v1/urls/count.json?url=',\r\n      args: {responseType: 'text'},\r\n      operators: [\r\n        map((text: string) => JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1'))),\r\n        map((res: any) => +res.count)\r\n      ]\r\n    }\r\n  },\r\n  reddit: {\r\n    type: 'reddit',\r\n    text: 'Reddit',\r\n    icon: 'fa fa-reddit-alien',\r\n    color: '#FF4006',\r\n    share: {\r\n      desktop: 'http://www.reddit.com/submit?url=',\r\n      android: 'http://www.reddit.com/submit?url=',\r\n      ios: 'http://www.reddit.com/submit?url=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        title: 'title'\r\n      },\r\n    },\r\n    count: {\r\n      request: 'http',\r\n      url: 'https://buttons.reddit.com/button_info.json?url=',\r\n      operators: [\r\n        map((res: any) => +res.data.children[0].data.score)\r\n      ]\r\n    },\r\n  },\r\n  tumblr: {\r\n    type: 'tumblr',\r\n    text: 'Tumblr',\r\n    icon: 'fa fa-tumblr',\r\n    color: '#36465D',\r\n    share: {\r\n      desktop: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      android: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      ios: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\r\n      operators: [\r\n        metaTagsOperator\r\n      ],\r\n      metaTags: {\r\n        description: 'caption',\r\n        tags: 'tags'\r\n      }\r\n    },\r\n    count: {\r\n      request: 'jsonp',\r\n      url: 'https://api.tumblr.com/v2/share/stats?url=',\r\n      operators: [\r\n        map((res: any) => +res.response.note_count)\r\n      ]\r\n    }\r\n  },\r\n  whatsapp: {\r\n    type: 'whatsapp',\r\n    text: 'WhatsApp',\r\n    icon: 'fa fa-whatsapp',\r\n    color: '#25D366',\r\n    share: {\r\n      desktop: 'https://web.whatsapp.com/send?',\r\n      android: 'whatsapp://send?',\r\n      ios: 'whatsapp://send?',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        description: 'text'\r\n      }\r\n    }\r\n  },\r\n  telegram: {\r\n    type: 'telegram',\r\n    text: 'Telegram',\r\n    icon: 'fa fa-send',\r\n    color: '#0088cc',\r\n    share: {\r\n      desktop: 'https://t.me/share/url?url=',\r\n      android: 'https://t.me/share/url?url=',\r\n      ios: 'https://t.me/share/url?url=',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        description: 'text'\r\n      }\r\n    }\r\n  },\r\n  vk: {\r\n    type: 'vk',\r\n    text: 'VKontakte',\r\n    icon: 'fa fa-vk',\r\n    color: '#4C75A3',\r\n    share: {\r\n      desktop: 'http://vk.com/share.php?url=',\r\n      android: 'http://vk.com/share.php?url=',\r\n      ios: 'http://vk.com/share.php?url=',\r\n      operators: [noneOperator]\r\n    }\r\n  },\r\n  stumble: {\r\n    type: 'stumble',\r\n    text: 'Stumble',\r\n    icon: 'fa fa-stumbleupon',\r\n    color: '#eb4924',\r\n    share: {\r\n      desktop: 'http://www.stumbleupon.com/submit?url=',\r\n      android: 'http://www.stumbleupon.com/submit?url=',\r\n      ios: 'http://www.stumbleupon.com/submit?url=',\r\n      operators: [noneOperator],\r\n    }\r\n  },\r\n  email: {\r\n    type: 'email',\r\n    text: 'Email',\r\n    icon: 'fa fa-envelope',\r\n    color: '#32A1A3',\r\n    share: {\r\n      desktop: 'mailto:?',\r\n      android: 'mailto:?',\r\n      ios: 'mailto:?',\r\n      operators: [metaTagsOperator],\r\n      metaTags: {\r\n        title: 'subject',\r\n        description: 'body'\r\n      }\r\n    }\r\n  },\r\n  copy: {\r\n    type: 'copy',\r\n    text: 'Copy link',\r\n    successText: 'Copied',\r\n    successIcon: 'fa fa-check',\r\n    failText: 'Error',\r\n    failIcon: 'fa fa-exclamation',\r\n    icon: 'fa fa-link',\r\n    color: '#607D8B',\r\n    share: {\r\n      operators: copyOperators\r\n    }\r\n  },\r\n  print: {\r\n    type: 'print',\r\n    text: 'Print',\r\n    icon: 'fa fa-print',\r\n    color: 'brown',\r\n    share: {\r\n      operators: [printOperator]\r\n    }\r\n  }\r\n};\r\n",
    "import { Inject, Injectable } from '@angular/core';\r\nimport { IShareButton, IShareButtons, ShareButtonsConfig, ShareButtonsOptions } from './share.models';\r\nimport { CONFIG } from './share.tokens';\r\nimport { shareButtonsProp } from './share.prop';\r\n\r\ndeclare const global: any;\r\ndeclare const window: any;\r\ndeclare const navigator: any;\r\n\r\n@Injectable()\r\nexport class ShareButtons {\r\n\r\n  /** List of share buttons */\r\n  allButtons: string[];\r\n\r\n  /** Default options */\r\n  options: ShareButtonsOptions;\r\n\r\n  /** Default properties */\r\n  prop: IShareButtons;\r\n\r\n  /** User OS */\r\n  os: string;\r\n\r\n  constructor(@Inject(CONFIG) config: ShareButtonsConfig) {\r\n\r\n    /** Set buttons properties */\r\n    this.prop = shareButtonsProp;\r\n\r\n    /** Set buttons list */\r\n    this.allButtons = Object.keys(this.prop);\r\n\r\n    /** Set default options */\r\n    this.options = {\r\n      theme: 'default',\r\n      include: this.allButtons,\r\n      exclude: [],\r\n      size: 0,\r\n      title: null,\r\n      image: null,\r\n      description: null,\r\n      tags: null,\r\n      gaTracking: false,\r\n      twitterAccount: null,\r\n      windowWidth: 800,\r\n      windowHeight: 500\r\n    };\r\n\r\n    if (config) {\r\n      /** Override global options with user's preference */\r\n      this.options = mergeDeep(this.options, config.options);\r\n      this.prop = mergeDeep(this.prop, config.prop);\r\n    }\r\n\r\n    /** Get user browser info */\r\n    this.os = getOS();\r\n  }\r\n\r\n  get twitterAccount() {\r\n    return this.options.twitterAccount;\r\n  }\r\n\r\n  /**\r\n   * Get wanted buttons\r\n   */\r\n  get buttons() {\r\n    if (!this.options.exclude.length) {\r\n      return this.options.include;\r\n    }\r\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\r\n  }\r\n\r\n  get theme() {\r\n    return this.options.theme;\r\n  }\r\n\r\n  get windowSize() {\r\n    return `width=${this.options.windowWidth}, height=${this.options.windowHeight}`;\r\n  }\r\n\r\n  get title() {\r\n    return this.options.title;\r\n  }\r\n\r\n  get description() {\r\n    return this.options.description;\r\n  }\r\n\r\n  get image() {\r\n    return this.options.image;\r\n  }\r\n\r\n  get tags() {\r\n    return this.options.tags;\r\n  }\r\n\r\n  get gaTracking() {\r\n    return this.options.gaTracking;\r\n  }\r\n\r\n  get size() {\r\n    return this.options.size;\r\n  }\r\n\r\n  registerButton(name: string, data: IShareButton) {\r\n    this.prop = {...shareButtonsProp, ...{[name]: data}};\r\n    this.allButtons = Object.keys(this.prop);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Determine the mobile operating system.\r\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\r\n */\r\nfunction getOS() {\r\n  const userAgent = (navigator || global).userAgent || (navigator || global).vendor || (window || global).opera;\r\n\r\n  if (/android/i.test(userAgent)) {\r\n    return 'android';\r\n  }\r\n\r\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n  if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\r\n    return 'ios';\r\n  }\r\n\r\n  return 'desktop';\r\n}\r\n\r\n/**\r\n * Simple object check.\r\n */\r\nfunction isObject(item) {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\n/**\r\n * Deep merge two objects.\r\n */\r\nfunction mergeDeep(target, ...sources) {\r\n  if (!sources.length) {\r\n    return target;\r\n  }\r\n  const source = sources.shift();\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) {\r\n          Object.assign(target, {[key]: {}});\r\n        }\r\n        mergeDeep(target[key], source[key]);\r\n      } else {\r\n        Object.assign(target, {[key]: source[key]});\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(target, ...sources);\r\n}\r\n",
    "import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  HostListener,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { catchError } from 'rxjs/operators/catchError';\r\nimport { take } from 'rxjs/operators/take';\r\nimport { tap } from 'rxjs/operators/tap';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\n\r\nimport { ShareButtons } from './share.service';\r\nimport { IShareButton, ShareButtonRef } from './share.models';\r\n\r\n/** Google analytics ref */\r\ndeclare const ga: Function;\r\ndeclare const global: any;\r\ndeclare const window: any;\r\n\r\n@Directive({\r\n  selector: '[shareButton]'\r\n})\r\nexport class ShareButtonDirective {\r\n\r\n  /** A ref for window object that works on SSR */\r\n  window: Window;\r\n\r\n  /** Button properties */\r\n  prop: IShareButton;\r\n\r\n  /** The validated share URL */\r\n  url: string;\r\n\r\n  /** Button class - used to remove previous class when the button type is changed */\r\n  buttonClass: string;\r\n\r\n  /** Meta tags inputs - initialized from the global options */\r\n  @Input() sbTitle = this.shareService.title;\r\n  @Input() sbDescription = this.shareService.description;\r\n  @Input() sbImage = this.shareService.image;\r\n  @Input() sbTags = this.shareService.tags;\r\n\r\n  /** Create share button  */\r\n  @Input('shareButton')\r\n  set setButton(buttonName: string) {\r\n\r\n    /** Create a new button of type <buttonName> */\r\n    const button = {...this.shareService.prop[buttonName]};\r\n\r\n    if (button) {\r\n\r\n      /** Set share button */\r\n      this.prop = button;\r\n\r\n      /** Remove previous button class */\r\n      this.renderer.removeClass(this.el.nativeElement, 'sb-' + this.buttonClass);\r\n\r\n      /** Add new button class */\r\n      this.renderer.addClass(this.el.nativeElement, 'sb-' + button.type);\r\n\r\n      /** Keep a copy of the class for future replacement */\r\n      this.buttonClass = button.type;\r\n\r\n      /** Get link's shared count */\r\n      this.emitCount();\r\n    } else {\r\n      throw new Error(`[ShareButtons]: The share button '${buttonName}' does not exist!`);\r\n    }\r\n  }\r\n\r\n  /** Set share URL */\r\n  @Input()\r\n  set sbUrl(newUrl: string) {\r\n\r\n    /** Check if new URL is equal the current URL */\r\n    if (newUrl !== this.url) {\r\n      this.url = this.getValidURL(newUrl);\r\n      this.emitCount();\r\n    }\r\n  }\r\n\r\n  /** Share count event */\r\n  @Output() sbCount = new EventEmitter<number>();\r\n\r\n  /** Share dialog opened event */\r\n  @Output() sbOpened = new EventEmitter<string>();\r\n\r\n  /** Share dialog closed event */\r\n  @Output() sbClosed = new EventEmitter<string>();\r\n\r\n  constructor(private shareService: ShareButtons,\r\n              private http: HttpClient,\r\n              public renderer: Renderer2,\r\n              public cd: ChangeDetectorRef,\r\n              private el: ElementRef) {\r\n    this.window = window || global;\r\n  }\r\n\r\n  /**\r\n   * Share link on element click\r\n   */\r\n  @HostListener('click')\r\n  onClick() {\r\n    /** Set user did not set the url using [sbUrl], use window URL */\r\n    if (!this.url) {\r\n      this.url = encodeURIComponent(this.window.location.href);\r\n    }\r\n\r\n    /** Emit opened share button type */\r\n    this.sbOpened.emit(this.prop.type);\r\n\r\n    const ref: ShareButtonRef = {\r\n      url: this.url,\r\n      cd: this.cd,\r\n      renderer: this.renderer,\r\n      window: this.window,\r\n      prop: this.prop,\r\n      el: this.el.nativeElement,\r\n      os: this.shareService.os,\r\n      metaTags: {\r\n        title: this.sbTitle,\r\n        description: this.sbDescription,\r\n        image: this.sbImage,\r\n        tags: this.sbTags,\r\n        via: this.shareService.twitterAccount,\r\n      }\r\n    };\r\n\r\n    /** Share the link */\r\n    of(ref).pipe(\r\n      ...this.prop.share.operators,\r\n      tap((sharerURL: string) => this.share(sharerURL)),\r\n      take(1)\r\n    ).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Emit share count\r\n   */\r\n  emitCount() {\r\n    /** Only if share count has observers & the button has support for share count */\r\n    if (this.url && this.sbCount.observers.length && this.prop.count) {\r\n\r\n      /** Emit share count to (sbCount) Output */\r\n      this.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open sharing window\r\n   * @param url - Share URL\r\n   */\r\n  share(url: string) {\r\n    let popUp;\r\n    if (url) {\r\n\r\n      /** GA tracking */\r\n      if (this.shareService.gaTracking && typeof ga !== 'undefined') {\r\n        ga('send', 'social', this.prop.type, 'click', this.url);\r\n      }\r\n\r\n      popUp = this.window.open(url, 'newwindow', this.shareService.windowSize);\r\n    }\r\n\r\n    /** If dialog closed event has subscribers, emit closed dialog type */\r\n    if (this.sbClosed.observers.length && popUp) {\r\n      const pollTimer = this.window.setInterval(() => {\r\n        if (popUp.closed) {\r\n          this.window.clearInterval(pollTimer);\r\n          this.sbClosed.emit(this.prop.type);\r\n        }\r\n      }, 200);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get link share count\r\n   * @param url - Share URL\r\n   * @returns Share count\r\n   */\r\n  count(url: string): Observable<any> {\r\n\r\n    if (this.prop.count.request === 'jsonp') {\r\n\r\n      return this.http.jsonp<any>(this.prop.count.url + url, 'callback').pipe(\r\n        ...this.prop.count.operators,\r\n        catchError(() => empty()),\r\n      );\r\n    } else {\r\n\r\n      return this.http.get<any>(this.prop.count.url + url, this.prop.count.args).pipe(\r\n        ...this.prop.count.operators,\r\n        catchError(() => empty())\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a valid URL for sharing\r\n   * @param url - URL to validate\r\n   * @returns Sharable URL\r\n   */\r\n  private getValidURL(url: string) {\r\n\r\n    if (url) {\r\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n\r\n      if (r.test(url)) {\r\n        return encodeURIComponent(url);\r\n      }\r\n      console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\r\n    }\r\n    /** fallback to page current URL */\r\n    return encodeURIComponent(this.window.location.href);\r\n  }\r\n\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'nFormatter'\r\n})\r\nexport class NFormatterPipe implements PipeTransform {\r\n\r\n  transform(num: any, digits?: any): any {\r\n\r\n    if (typeof num !== 'number') {\r\n      num = 1;\r\n    }\r\n\r\n    return nFormatter(num, digits);\r\n  }\r\n\r\n}\r\n\r\n/** Change share counts to a readable number */\r\nexport const nFormatter = (num: number, digits: number) => {\r\n\r\n  const si = [\r\n    {value: 1E18, symbol: 'E'},\r\n    {value: 1E15, symbol: 'P'},\r\n    {value: 1E12, symbol: 'T'},\r\n    {value: 1E9, symbol: 'G'},\r\n    {value: 1E6, symbol: 'M'},\r\n    {value: 1E3, symbol: 'K'}\r\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\r\n\r\n  for (let i = 0; i < si.length; i++) {\r\n    if (num >= si[i].value) {\r\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\r\n    }\r\n  }\r\n  return num.toFixed(digits).replace(rx, '$1');\r\n};\r\n",
    "import { NgModule, InjectionToken } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ShareButtons } from './share.service';\r\nimport { ShareButtonDirective } from './share-button.directive';\r\nimport { NFormatterPipe } from './n-formatter.pipe';\r\nimport { ShareButtonsConfig } from './share.models';\r\nimport { CONFIG } from './share.tokens';\r\n\r\nexport function ShareButtonsFactory(config: ShareButtonsConfig) {\r\n  return new ShareButtons(config);\r\n}\r\n\r\n/** TODO: remove CommonModule */\r\n@NgModule({\r\n  declarations: [\r\n    ShareButtonDirective,\r\n    NFormatterPipe\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    ShareButtonDirective,\r\n    NFormatterPipe\r\n  ]\r\n})\r\nexport class ShareModule {\r\n  static forRoot(config?: ShareButtonsConfig) {\r\n    return {\r\n      ngModule: ShareModule,\r\n      providers: [\r\n        {provide: CONFIG, useValue: config},\r\n        {\r\n          provide: ShareButtons,\r\n          useFactory: ShareButtonsFactory,\r\n          deps: [CONFIG]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n"
  ],
  "names": [
    "metaTagsOperator",
    "map$1",
    "ref",
    "metaTags",
    "prop",
    "share",
    "metaTagsValues",
    "SharerURL",
    "os",
    "Object",
    "keys",
    "map",
    "key",
    "link",
    "printOperator",
    "window",
    "print",
    "pinterestOperator",
    "url",
    "includes",
    "ogDescription",
    "document",
    "querySelector",
    "ogImage",
    "console",
    "warn",
    "copyOperators",
    "renderer",
    "setStyle",
    "el",
    "decodeURIComponent",
    "textArea",
    "createElement",
    "style",
    "position",
    "top",
    "left",
    "width",
    "padding",
    "border",
    "outline",
    "boxShadow",
    "background",
    "delay",
    "value",
    "select",
    "removeChild",
    "text",
    "successText",
    "icon",
    "successIcon",
    "cd",
    "markForCheck",
    "delay$1",
    "temp",
    "shareButtonsProp",
    "facebook",
    "type",
    "color",
    "desktop",
    "android",
    "ios",
    "operators",
    "noneOperator",
    "count",
    "request",
    "res",
    "share_count",
    "twitter",
    "description",
    "tags",
    "via",
    "google",
    "linkedin",
    "title",
    "pinterest",
    "image",
    "args",
    "responseType",
    "JSON",
    "parse",
    "replace",
    "reddit",
    "data",
    "children",
    "score",
    "tumblr",
    "response",
    "note_count",
    "whatsapp",
    "telegram",
    "vk",
    "stumble",
    "email",
    "copy",
    "failText",
    "ShareButtons",
    "config",
    "this",
    "allButtons",
    "options",
    "theme",
    "include",
    "size",
    "gaTracking",
    "twitterAccount",
    "windowWidth",
    "mergeDeep",
    "userAgent",
    "navigator",
    "global",
    "vendor",
    "opera",
    "test",
    "getOS",
    "get",
    "defineProperty",
    "prototype",
    "_this",
    "exclude",
    "length",
    "enumerable",
    "configurable",
    "windowHeight",
    "registerButton",
    "name",
    "_a",
    "assign",
    "target",
    "_b",
    "source",
    "isObject",
    "apply",
    "__spread",
    "sources",
    "ShareButtonDirective",
    "shareService",
    "http$$1",
    "sbTitle",
    "sbDescription",
    "sbTags",
    "sbCount",
    "EventEmitter",
    "sbOpened",
    "sbClosed",
    "button",
    "removeClass",
    "nativeElement",
    "buttonClass",
    "emitCount",
    "set",
    "newUrl",
    "getValidURL",
    "onClick",
    "observers",
    "subscribe",
    "emit",
    "ga",
    "popUp",
    "pollTimer_1",
    "setInterval",
    "closed",
    "clearInterval",
    "http",
    "pipe",
    "catchError$1",
    "empty$1",
    "encodeURIComponent",
    "Directive",
    "selector",
    "propDecorators",
    "Input",
    "sbImage",
    "setButton",
    "sbUrl",
    "Output",
    "HostListener",
    "NFormatterPipe",
    "transform",
    "num",
    "digits"
  ],
  "mappings": "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"
}
